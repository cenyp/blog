/*
 * @lc app=leetcode.cn id=8 lang=javascript
 *
 * [8] 字符串转换整数 (atoi)
 */

// @lc code=start
/**
 * @param {string} s
 * @return {number}
 */
var myAtoi = function (s) {
  let res = 0;
  let sign = 1;
  let index = 0;
  let n = s.length;
  // 去除前导空格
  while (index < n && s[index] === " ") {
    index++;
  }
  // 处理符号
  if (index < n && (s[index] === "+" || s[index] === "-")) {
    sign = s[index] === "+" ? 1 : -1;
    index++;
  }
  // 转换数字
  /**
   * 巧妙地使用了 ASCII 码来判断是否是数字
   * javaScript 会根据字符串的字典顺序（字符编码）进行比较。
        字符串 'a' 的 Unicode 码点是 97。
        字符串 '0' 的 Unicode 码点是 48

    因为 97（'a' 的编码）大于 48（'0' 的编码），所以：
    'a' >= '0' 的结果为 true
   */
  while (index < n && s[index] >= "0" && s[index] <= "9") {
    res = res * 10 + (s[index] - "0");
    index++;
    // 判断是否越界
    if (res * sign > 2 ** 31 - 1) {
      return 2 ** 31 - 1;
    } else if (res * sign < -(2 ** 31)) {
      return -(2 ** 31);
    }
  }
  return res * sign;
};
// @lc code=end

/**
请你来实现一个 myAtoi(string s) 函数，使其能将字符串转换成一个 32 位有符号整数。

函数 myAtoi(string s) 的算法如下：

空格：读入字符串并丢弃无用的前导空格（" "）
符号：检查下一个字符（假设还未到字符末尾）为 '-' 还是 '+'。如果两者都不存在，则假定结果为正。
转换：通过跳过前置零来读取该整数，直到遇到非数字字符或到达字符串的结尾。如果没有读取数字，则结果为0。
舍入：如果整数数超过 32 位有符号整数范围 [−2^31,  2^31 − 1] ，需要截断这个整数，使其保持在这个范围内。具体来说，小于 −2^31 的整数应该被舍入为 −2^31 ，大于 2^31 − 1 的整数应该被舍入为 2^31 − 1 。
返回整数作为最终结果。

 

示例 1：
输入：s = "42"
输出：42
解释：加粗的字符串为已经读入的字符，插入符号是当前读取的字符。

带下划线线的字符是所读的内容，插入符号是当前读入位置。
第 1 步："42"（当前没有读入字符，因为没有前导空格）
         ^
第 2 步："42"（当前没有读入字符，因为这里不存在 '-' 或者 '+'）
         ^
第 3 步："42"（读入 "42"）
           ^

示例 2：
输入：s = " -042"
输出：-42
解释：

第 1 步："   -042"（读入前导空格，但忽视掉）
            ^
第 2 步："   -042"（读入 '-' 字符，所以结果应该是负数）
             ^
第 3 步："   -042"（读入 "042"，在结果中忽略前导零）
               ^


示例 3：
输入：s = "1337c0d3"
输出：1337
解释：

第 1 步："1337c0d3"（当前没有读入字符，因为没有前导空格）
         ^
第 2 步："1337c0d3"（当前没有读入字符，因为这里不存在 '-' 或者 '+'）
         ^
第 3 步："1337c0d3"（读入 "1337"；由于下一个字符不是一个数字，所以读入停止）
             ^

示例 4：
输入：s = "0-1"
输出：0
解释：

第 1 步："0-1" (当前没有读入字符，因为没有前导空格)
         ^
第 2 步："0-1" (当前没有读入字符，因为这里不存在 '-' 或者 '+')
         ^
第 3 步："0-1" (读入 "0"；由于下一个字符不是一个数字，所以读入停止)
          ^

示例 5：
输入：s = "words and 987"
输出：0
解释：

读取在第一个非数字字符“w”处停止。

 */
